# ---------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ---------------------------------------------------------------------------

name: kafka-sink-pipe-test
variables:
  - name: "kafka.securityProtocol"
    value: "PLAINTEXT"
  - name: "kafka.deserializeHeaders"
    value: "true"
  - name: "kafka.topic"
    value: "my-topic-2"
  - name: "kafka.message.key"
    value: "citrus:randomNumber(4)"
  - name: "kafka.message"
    value: "Camel rocks!"
  - name: "kafka.user"
    value: "redpanda"
  - name: "kafka.password"
    value: "admin"
actions:
  # Create Kafka infrastructure
  - testcontainers:
      start:
        redpanda: {}

  # Create Camel JBang integration
  - camel:
      jbang:
        run:
          integration:
            file: "kafka/kafka-sink-pipe.yaml"
            systemProperties:
              file: "kafka/application.properties"
              properties:
                - name: "kafka.message"
                  value: "${kafka.message}"

  # Kafka consumer endpoint
  - createEndpoint:
      name: kafkaSinkConsumer
      type: "kafka"
      properties:
        topic: "${kafka.topic}"
        server: "${CITRUS_TESTCONTAINERS_REDPANDA_BOOTSTRAP_SERVERS}"

  # Verify Kafka event
  - receive:
      endpoint: kafkaSinkConsumer
      message:
        body:
          data: |
            ${kafka.message}
